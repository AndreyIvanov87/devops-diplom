- name: install python 
  ansible.builtin.apt:
    name: python3
    state: present
    update_cache: yes 
  when:
    ansible_os_family == "Debian"


- name: Install mysql Server 
  apt:
    pkg:
    - mysql-server-8.0
    - mysql-client-8.0
    - python3-pymysql

  when:
    ansible_os_family == "Debian"

- name: place mysqld config from template
  template:
    src=templates/mysqld.cnf
    dest=/etc/mysql/mysql.conf.d/mysqld.cnf

- name: set diffirent server_id for slave
  ansible.builtin.replace:
    path: /etc/mysql/mysql.conf.d/mysqld.cnf
    regexp: 'server-id = 1'
    replace: 'server-id = 2' 
  when:   inventory_hostname   ==   mysql_slave


- name: Check that the file as flag exists
  stat:
    path: /home/vagrant/mysqld.cnf
  register: stat_kostyl

- name: enable and start mysql  
  systemd:
    name: mysql
    enabled: yes
    state: started

- name: first update for root password
  community.mysql.mysql_user:
    name: root
    password: "{{ root_password }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  when: not stat_kostyl.stat.exists

- name: update root accounts for all hosts
  mysql_user:  
    name: root  
    host: "{{ item }}"  
    password: "{{ root_password }}"  
    login_user: root  
    login_password: "{{ root_password }}"  
    check_implicit_admin: yes  
    priv: "*.*:ALL,GRANT"  

  with_items:  
    - "{{ ansible_hostname }}"  
    - 127.0.0.1  
    - ::1  
    - localhost
    - 192.168.2.%
  when: not stat_kostyl.stat.exists


#костыль чтобы был флаг на правку привилегий при установке mysql
- name: place test mysql config for kostyl
  template:
    src=templates/mysqld.cnf
    dest=/home/vagrant/mysqld.cnf

- name: restart mysql
  service: 
    name: mysql
    state: restarted

- name: Create a new database with name 'wordpress'
  community.mysql.mysql_db:
    name: wordpress
    state: present
    login_user: root
    login_password: "{{ root_password }}"

- name: Create database user with name 'wordpress' with privileges to database wordpress
  community.mysql.mysql_user:
    name: wordpress
    host: "%"
    password: "wordpress"
    priv: 'wordpress.*:ALL'
    state: present
    login_user: root
    login_password: "{{ root_password }}"

- block:
    - name: start replication
      debug:
        msg: here we'll  start replication 
  
    - name: block changes to master database
      community.mysql.mysql_query:
        login_db: mysql
        query: FLUSH TABLES WITH READ LOCK;
        login_user: root
        login_password: "{{ root_password }}"
        #login_host: hostvars["{{ mysql_master }}"]['ansible_default_ipv4']['address']
        login_host: "{{ mysql_master_ip }}"
    - name: dump all master host databases    
      community.mysql.mysql_db:
        state: dump
        name: all
        target: /tmp/dump.sql
        login_user: root
        login_password: "{{ root_password }}"
        #login_host: hostvars["{{ mysql_master }}"]['ansible_default_ipv4']['address']
        login_host: "{{ mysql_master_ip }}"

    - name: get master log position      
      community.mysql.mysql_replication:
        mode: getprimary
        login_user: root
        login_password: "{{ root_password }}"
        #login_host: hostvars["{{ mysql_master }}"]['ansible_default_ipv4']['address']
        login_host: "{{ mysql_master_ip }}"
      register: master_status

    - name: Print return information from the previous task
      ansible.builtin.debug:
        msg: "{{ master_status }}"

    - name: start master database
      community.mysql.mysql_query:
        login_db: mysql
        query: UNLOCK TABLES;
        login_user: root
        login_password: "{{ root_password }}"
        #login_host: hostvars["{{ mysql_master }}"]['ansible_default_ipv4']['address']
        login_host: "{{ mysql_master_ip }}"

    - name:  Import dump.sql 
      community.mysql.mysql_db:
        state: import
        name: all
        target: /tmp/dump.sql
        login_user: root
        login_password: "{{ root_password }}"

    - name: Print return information from the previous task
      ansible.builtin.debug:
        msg: 
          - "{{ master_status['File'] }}"
          - "{{ master_status['Position'] }}"

    - name: start replication 
      community.mysql.mysql_replication:
        mode: changeprimary
        primary_host: "{{ mysql_master_ip }}"
        primary_log_file: "{{ master_status['File'] }}"
        primary_log_pos: "{{ master_status['Position'] }}"
        primary_user: root
        primary_password: "{{ root_password }}"
        login_user: root
        login_password: "{{ root_password }}"

    - name: start master database
      community.mysql.mysql_query:
        login_db: mysql
        query: START REPLICA;
        login_user: root
        login_password: "{{ root_password }}"

  when:   inventory_hostname   ==   mysql_slave

  #login_host: hostvars["{{ mysql_master }}"]['ansible_default_ipv4']['address']
  #CHANGE MASTER TO MASTER_HOST='192.168.2.201',MASTER_LOG_FILE='mysql-bin.000006',MASTER_LOG_POS=157, MASTER_USER='root', MASTER_PASSWORD='test-password';



